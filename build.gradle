plugins {
	id "dev.architectury.loom" version "1.7-SNAPSHOT"
	id "com.hypherionmc.modutils.modpublisher" version "2.+"
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url "https://maven.neoforged.net/releases/" }
	maven { url "https://maven.blamejared.com" }
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.su5ed.dev/releases" }
	maven { url 'https://maven.fallenbreath.me/releases' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		mappings "dev.architectury:yarn-mappings-patch-neoforge:${project.yarn_patch}"
	}
	neoForge "net.neoforged:neoforge:${project.neoforge_version}"
	modImplementation(include("me.fallenbreath:conditional-mixin-neoforge:0.6.3"))
	modCompileOnly("org.embeddedt:embeddium-1.21.1:1.0.12-beta.401+mc1.21.1")
	modCompileOnly("maven.modrinth:sodium:mc1.21-0.6.0-beta.2-neoforge")
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	toolchain.languageVersion = JavaLanguageVersion.of(21)

	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.getArchivesName()}"}
	}
}

publisher {
	apiKeys {
		modrinth System.getenv("MODRINTH_TOKEN")
		curseforge System.getenv("CURSEFORGE_TOKEN")
	}

	setCurseID("${project.curseforge_id}")
	setModrinthID("${project.modrinth_id}")
	setVersionType("alpha")
	setChangelog(file("CHANGELOG.md").getText("UTF-8"))
	setVersion("${project.version}")
	setDisplayName("${project.version}")
	setGameVersions("1.21", "1.21.1")
	setLoaders("neoforge")
	setArtifact(remapJar)
	addAdditionalFile(sourcesJar)
}
